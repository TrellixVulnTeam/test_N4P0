014f88cb5cf74778580e340305cddcae
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSchematics = exports.createSchematicsWithLib = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const add_dependencies_1 = require("./add-dependencies");
const helpers_1 = require("../../utils/helpers");
const prompts_1 = require("./prompts");
const copy_files_1 = require("./copy-files");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const files_1 = require("../../utils/files");
function createSchematicsWithLib(options, scopeWithName) {
    return (tree, context) => __awaiter(this, void 0, void 0, function* () {
        add_dependencies_1.installSchematicsDependencies(tree);
        let importModule, importStatement, packages;
        if (options.skipPrompts) {
            ({ importModule, importStatement, packages } = options);
        }
        else {
            ({ importModule, importStatement, packages } = yield prompts_1.getPrompts(options));
        }
        const host = helpers_1.createHost(tree);
        const { workspace } = yield core_1.workspaces.readWorkspace("/", host);
        const project = workspace.projects.get(scopeWithName);
        if (!project) {
            throw new schematics_1.SchematicsException(`Invalid project name: ${scopeWithName}`);
        }
        context.logger.info("⌛ Generating Schematic Files...");
        const templateSource = copy_files_1.copyFiles(importModule, options, importStatement, scopeWithName, packages, tree, project);
        return schematics_1.chain([schematics_1.mergeWith(templateSource)]);
    });
}
exports.createSchematicsWithLib = createSchematicsWithLib;
function createSchematics(options) {
    return (tree, context) => __awaiter(this, void 0, void 0, function* () {
        options = helpers_1.splitScopeFromName(options);
        const scopeWithName = options.scope
            ? `${options.scope}/${options.name}`
            : options.name;
        const onlySchematics = true;
        const isNx = tree.exists("/nx.json");
        const libPath = helpers_1.getLibPath(scopeWithName, isNx);
        add_dependencies_1.installSchematicsDependencies(tree, onlySchematics);
        let importModule, importStatement, packages;
        if (options.skipPrompts) {
            ({ importModule, importStatement, packages } = options);
        }
        else {
            ({ importModule, importStatement, packages } = yield prompts_1.getPrompts(options));
        }
        const host = helpers_1.createHost(tree);
        const { workspace } = yield core_1.workspaces.readWorkspace("/", host);
        const project = workspace.projects.get(scopeWithName);
        if (!project) {
            throw new schematics_1.SchematicsException(`Invalid project name: ${scopeWithName}`);
        }
        context.logger.info("⌛ Generating Schematic Files...");
        const templateSource = copy_files_1.copyFiles(importModule, options, importStatement, scopeWithName, packages, tree, project, onlySchematics);
        updateLibPackage(scopeWithName, tree, libPath);
        context.addTask(new tasks_1.NodePackageInstallTask());
        return schematics_1.chain([schematics_1.mergeWith(templateSource)]);
    });
}
exports.createSchematics = createSchematics;
function updateLibPackage(scopeWithName, tree, libPath) {
    const packageJSONPath = `${libPath}/package.json`;
    if (tree.exists(packageJSONPath)) {
        const pkg = files_1.getJSON(tree, packageJSONPath);
        const libDistPath = scopeWithName.replace("@", "");
        const depthFromRootLib = "../" +
            scopeWithName
                .split("/")
                .map(() => "..")
                .join("/");
        files_1.setJSON(tree, packageJSONPath, Object.assign(Object.assign({}, pkg), { schematics: "./schematics/collection.json", scripts: {
                prebuild: "npm run test:schematics",
                build: "tsc -p tsconfig.schematics.json",
                "copy:schemas": `cpx schematics/ng-add ../${depthFromRootLib}/dist/${libDistPath}/`,
                "copy:collection": `cpx schematics/collection.json ../${depthFromRootLib}/dist/${libDistPath}/schematics/`,
                postbuild: "npm run copy:schemas && npm run copy:collection",
            } }));
    }
}
//# sourceMappingURL=index.js.map