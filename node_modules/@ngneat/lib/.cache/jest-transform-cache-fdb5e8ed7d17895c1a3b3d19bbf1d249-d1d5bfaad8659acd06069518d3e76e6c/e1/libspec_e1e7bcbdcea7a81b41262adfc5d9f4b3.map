{"file":"/home/runner/work/lib/lib/src/test/lib.spec.ts","mappings":"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","names":[],"sources":["/home/runner/work/lib/lib/src/test/lib.spec.ts"],"sourcesContent":["import { Tree } from \"@angular-devkit/schematics\";\nimport {\n  SchematicTestRunner,\n  UnitTestTree,\n} from \"@angular-devkit/schematics/testing\";\nimport { Schema as WorkspaceOptions } from \"@schematics/angular/workspace/schema\";\nimport {\n  Schema as ApplicationOptions,\n  Style,\n} from \"@schematics/angular/application/schema\";\nimport * as path from \"path\";\n\nimport { Schema } from \"../lib/schema\";\nimport { Schema as CreateSchematicsOptions } from \"../lib/create-schematics/schema\";\n\nconst collectionPath = path.join(__dirname, \"../collection.json\");\n\nconst schematicRunner = new SchematicTestRunner(\n  \"@ngneat/lib\",\n  require.resolve(collectionPath)\n);\n\nconst workspaceOptions: WorkspaceOptions = {\n  name: \"workspace\",\n  newProjectRoot: \"projects\",\n  version: \"6.0.0\",\n};\n\nconst scopeWithName = \"@scope/toaster\";\n\nconst appOptions: ApplicationOptions = {\n  name: \"bar\",\n  inlineStyle: false,\n  inlineTemplate: false,\n  routing: false,\n  style: Style.Css,\n  skipTests: false,\n  skipPackageJson: false,\n};\n\nconst defaultOptions: Partial<Schema> = {\n  name: scopeWithName,\n  ci: \"github-actions\",\n  skipAngularCliGhPages: true,\n  skipSpectator: true,\n  skipSchematics: false,\n  skipPrompts: true,\n  importModule: true,\n  importStatement: \"ToastModule.forRoot()\",\n  packages: [],\n};\n\nconst defaultCreateSchematicsOptions: CreateSchematicsOptions = {\n  name: scopeWithName,\n  skipPrompts: true,\n  importModule: true,\n  importStatement: \"ToastModule.forRoot()\",\n  packages: [],\n};\n\nconst schematicResultFiles = [\n  \"/projects/scope/toaster/tsconfig.schematics.json\",\n  \"/projects/scope/toaster/schematics/collection.json\",\n  \"/projects/scope/toaster/schematics/ng-add/index.ts\",\n  \"/projects/scope/toaster/schematics/ng-add/schema.json\",\n  \"/projects/scope/toaster/schematics/ng-add/schema.ts\",\n  \"/projects/scope/toaster/schematics/ng-add/utils/index.ts\",\n  \"/projects/scope/toaster/schematics/ng-add/utils/ng-module-imports.ts\",\n  \"/projects/scope/toaster/schematics/ng-add/utils/project-main-file.ts\",\n  \"/projects/scope/toaster/schematics/ng-add/utils/project-targets.ts\",\n];\n\nconst libWOSchematicsResultFiles = [\n  \"/projects/scope/toaster/karma.conf.js\",\n  \"/projects/scope/toaster/ng-package.json\",\n  \"/projects/scope/toaster/package.json\",\n  \"/projects/scope/toaster/README.md\",\n  \"/projects/scope/toaster/tsconfig.lib.json\",\n  \"/projects/scope/toaster/tsconfig.lib.prod.json\",\n  \"/projects/scope/toaster/tsconfig.spec.json\",\n  \"/projects/scope/toaster/src/test.ts\",\n  \"/projects/scope/toaster/src/public-api.ts\",\n  \"/projects/scope/toaster/src/lib/toaster.module.ts\",\n  \"/.all-contributorsrc\",\n  \"/.prettierrc.json\",\n  \"/.releaserc.json\",\n  \"/CODE_OF_CONDUCT.md\",\n  \"/commitlint.config.js\",\n  \"/CONTRIBUTING.md\",\n  \"/.github/ISSUE_TEMPLATE.md\",\n  \"/LICENSE\",\n  \"/logo.svg\",\n  \"/.github/PULL_REQUEST_TEMPLATE.md\",\n  \"/hooks/pre-commit.js\",\n  \"/.github/workflows/release.yml\",\n  \"/.github/workflows/deploy.yml\",\n];\n\nconst resultFiles = [...libWOSchematicsResultFiles, ...schematicResultFiles];\n\ndescribe(\"ng-add\", () => {\n  describe(\"with project\", () => {\n    let appTree: UnitTestTree;\n\n    beforeEach(async () => {\n      appTree = await schematicRunner\n        .runExternalSchematicAsync(\n          \"@schematics/angular\",\n          \"workspace\",\n          workspaceOptions\n        )\n        .toPromise();\n      appTree = await schematicRunner\n        .runExternalSchematicAsync(\n          \"@schematics/angular\",\n          \"application\",\n          appOptions,\n          appTree\n        )\n        .toPromise();\n    });\n\n    it(\"works\", async () => {\n      const options = { ...defaultOptions };\n      const tree: UnitTestTree = await schematicRunner\n        .runSchematicAsync(\"ng-add\", options, appTree)\n        .toPromise();\n\n      expect(tree.files).toEqual(expect.arrayContaining(resultFiles));\n    });\n\n    it(\"works with skipLib=true for existing created lib\", async () => {\n      const appTreeWithLib = await schematicRunner\n        .runExternalSchematicAsync(\n          \"@schematics/angular\",\n          \"library\",\n          { name: scopeWithName },\n          appTree\n        )\n        .toPromise();\n\n      const options = { ...defaultOptions, skipLib: true };\n      const tree: UnitTestTree = await schematicRunner\n        .runSchematicAsync(\"ng-add\", options, appTreeWithLib)\n        .toPromise();\n\n      expect(tree.files).toEqual(expect.arrayContaining(resultFiles));\n    });\n\n    it(\"works with skipSchematics=true\", async () => {\n      const options = { ...defaultOptions, skipSchematics: true };\n      const tree: UnitTestTree = await schematicRunner\n        .runSchematicAsync(\"ng-add\", options, appTree)\n        .toPromise();\n\n      expect(tree.files).toEqual(\n        expect.arrayContaining(libWOSchematicsResultFiles)\n      );\n      expect(tree.files).not.toEqual(\n        expect.arrayContaining(schematicResultFiles)\n      );\n    });\n\n    it(\"fails with missing tree\", (done) => {\n      schematicRunner\n        .runSchematicAsync(\n          \"ng-add\",\n          {\n            name: \"test\",\n          },\n          Tree.empty()\n        )\n        .subscribe({\n          error: (err) => {\n            expect(err).toBeTruthy();\n            done();\n          },\n        });\n    });\n\n    it(\"fails with missing params: name\", (done) => {\n      schematicRunner.runSchematicAsync(\"ng-add\", {}, appTree).subscribe({\n        error: (err) => {\n          expect(err).toBeTruthy();\n          done();\n        },\n      });\n    });\n\n    it(\"fails with skipLib=true for missing lib\", (done) => {\n      const options = { ...defaultOptions, skipLib: true };\n\n      schematicRunner.runSchematicAsync(\"ng-add\", options, appTree).subscribe({\n        error: (err) => {\n          expect(err).toBeTruthy();\n          done();\n        },\n      });\n    });\n  });\n});\n\ndescribe(\"ng-generate:create-schematics\", () => {\n  describe(\"with project\", () => {\n    let appTree: UnitTestTree;\n\n    beforeEach(async () => {\n      appTree = await schematicRunner\n        .runExternalSchematicAsync(\n          \"@schematics/angular\",\n          \"workspace\",\n          workspaceOptions\n        )\n        .toPromise();\n      appTree = await schematicRunner\n        .runExternalSchematicAsync(\n          \"@schematics/angular\",\n          \"application\",\n          appOptions,\n          appTree\n        )\n        .toPromise();\n      appTree = await schematicRunner\n        .runExternalSchematicAsync(\n          \"@schematics/angular\",\n          \"library\",\n          { name: scopeWithName },\n          appTree\n        )\n        .toPromise();\n    });\n\n    it(\"works\", async () => {\n      const options: CreateSchematicsOptions = {\n        ...defaultCreateSchematicsOptions,\n      };\n      const tree: UnitTestTree = await schematicRunner\n        .runSchematicAsync(\"create-schematics\", options, appTree)\n        .toPromise();\n\n      expect(tree.files).toEqual(expect.arrayContaining(schematicResultFiles));\n    });\n\n    it(\"fails with missing tree\", (done) => {\n      const options: CreateSchematicsOptions = {\n        ...defaultCreateSchematicsOptions,\n      };\n\n      schematicRunner\n        .runSchematicAsync(\"create-schematics\", options, Tree.empty())\n        .subscribe({\n          error: (err) => {\n            expect(err).toBeTruthy();\n            done();\n          },\n        });\n    });\n\n    it(\"fails with missing params: name\", (done) => {\n      schematicRunner\n        .runSchematicAsync(\"create-schematics\", {}, appTree)\n        .subscribe({\n          error: (err) => {\n            expect(err).toBeTruthy();\n            done();\n          },\n        });\n    });\n  });\n});\n"],"version":3}