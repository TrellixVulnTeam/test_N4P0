45eedc9a2ebc41616d06e022cd8fa92b
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const schema_1 = require("@schematics/angular/application/schema");
const path = require("path");
const collectionPath = path.join(__dirname, "../collection.json");
const schematicRunner = new testing_1.SchematicTestRunner("@ngneat/lib", require.resolve(collectionPath));
const workspaceOptions = {
    name: "workspace",
    newProjectRoot: "projects",
    version: "6.0.0",
};
const scopeWithName = "@scope/toaster";
const appOptions = {
    name: "bar",
    inlineStyle: false,
    inlineTemplate: false,
    routing: false,
    style: schema_1.Style.Css,
    skipTests: false,
    skipPackageJson: false,
};
const defaultOptions = {
    name: scopeWithName,
    ci: "github-actions",
    skipAngularCliGhPages: true,
    skipSpectator: true,
    skipSchematics: false,
    skipPrompts: true,
    importModule: true,
    importStatement: "ToastModule.forRoot()",
    packages: [],
};
const defaultCreateSchematicsOptions = {
    name: scopeWithName,
    skipPrompts: true,
    importModule: true,
    importStatement: "ToastModule.forRoot()",
    packages: [],
};
const schematicResultFiles = [
    "/projects/scope/toaster/tsconfig.schematics.json",
    "/projects/scope/toaster/schematics/collection.json",
    "/projects/scope/toaster/schematics/ng-add/index.ts",
    "/projects/scope/toaster/schematics/ng-add/schema.json",
    "/projects/scope/toaster/schematics/ng-add/schema.ts",
    "/projects/scope/toaster/schematics/ng-add/utils/index.ts",
    "/projects/scope/toaster/schematics/ng-add/utils/ng-module-imports.ts",
    "/projects/scope/toaster/schematics/ng-add/utils/project-main-file.ts",
    "/projects/scope/toaster/schematics/ng-add/utils/project-targets.ts",
];
const libWOSchematicsResultFiles = [
    "/projects/scope/toaster/karma.conf.js",
    "/projects/scope/toaster/ng-package.json",
    "/projects/scope/toaster/package.json",
    "/projects/scope/toaster/README.md",
    "/projects/scope/toaster/tsconfig.lib.json",
    "/projects/scope/toaster/tsconfig.lib.prod.json",
    "/projects/scope/toaster/tsconfig.spec.json",
    "/projects/scope/toaster/src/test.ts",
    "/projects/scope/toaster/src/public-api.ts",
    "/projects/scope/toaster/src/lib/toaster.module.ts",
    "/.all-contributorsrc",
    "/.prettierrc.json",
    "/.releaserc.json",
    "/CODE_OF_CONDUCT.md",
    "/commitlint.config.js",
    "/CONTRIBUTING.md",
    "/.github/ISSUE_TEMPLATE.md",
    "/LICENSE",
    "/logo.svg",
    "/.github/PULL_REQUEST_TEMPLATE.md",
    "/hooks/pre-commit.js",
    "/.github/workflows/release.yml",
    "/.github/workflows/deploy.yml",
];
const resultFiles = [...libWOSchematicsResultFiles, ...schematicResultFiles];
describe("ng-add", () => {
    describe("with project", () => {
        let appTree;
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            appTree = yield schematicRunner
                .runExternalSchematicAsync("@schematics/angular", "workspace", workspaceOptions)
                .toPromise();
            appTree = yield schematicRunner
                .runExternalSchematicAsync("@schematics/angular", "application", appOptions, appTree)
                .toPromise();
        }));
        it("works", () => __awaiter(void 0, void 0, void 0, function* () {
            const options = Object.assign({}, defaultOptions);
            const tree = yield schematicRunner
                .runSchematicAsync("ng-add", options, appTree)
                .toPromise();
            expect(tree.files).toEqual(expect.arrayContaining(resultFiles));
        }));
        it("works with skipLib=true for existing created lib", () => __awaiter(void 0, void 0, void 0, function* () {
            const appTreeWithLib = yield schematicRunner
                .runExternalSchematicAsync("@schematics/angular", "library", { name: scopeWithName }, appTree)
                .toPromise();
            const options = Object.assign(Object.assign({}, defaultOptions), { skipLib: true });
            const tree = yield schematicRunner
                .runSchematicAsync("ng-add", options, appTreeWithLib)
                .toPromise();
            expect(tree.files).toEqual(expect.arrayContaining(resultFiles));
        }));
        it("works with skipSchematics=true", () => __awaiter(void 0, void 0, void 0, function* () {
            const options = Object.assign(Object.assign({}, defaultOptions), { skipSchematics: true });
            const tree = yield schematicRunner
                .runSchematicAsync("ng-add", options, appTree)
                .toPromise();
            expect(tree.files).toEqual(expect.arrayContaining(libWOSchematicsResultFiles));
            expect(tree.files).not.toEqual(expect.arrayContaining(schematicResultFiles));
        }));
        it("fails with missing tree", (done) => {
            schematicRunner
                .runSchematicAsync("ng-add", {
                name: "test",
            }, schematics_1.Tree.empty())
                .subscribe({
                error: (err) => {
                    expect(err).toBeTruthy();
                    done();
                },
            });
        });
        it("fails with missing params: name", (done) => {
            schematicRunner.runSchematicAsync("ng-add", {}, appTree).subscribe({
                error: (err) => {
                    expect(err).toBeTruthy();
                    done();
                },
            });
        });
        it("fails with skipLib=true for missing lib", (done) => {
            const options = Object.assign(Object.assign({}, defaultOptions), { skipLib: true });
            schematicRunner.runSchematicAsync("ng-add", options, appTree).subscribe({
                error: (err) => {
                    expect(err).toBeTruthy();
                    done();
                },
            });
        });
    });
});
describe("ng-generate:create-schematics", () => {
    describe("with project", () => {
        let appTree;
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            appTree = yield schematicRunner
                .runExternalSchematicAsync("@schematics/angular", "workspace", workspaceOptions)
                .toPromise();
            appTree = yield schematicRunner
                .runExternalSchematicAsync("@schematics/angular", "application", appOptions, appTree)
                .toPromise();
            appTree = yield schematicRunner
                .runExternalSchematicAsync("@schematics/angular", "library", { name: scopeWithName }, appTree)
                .toPromise();
        }));
        it("works", () => __awaiter(void 0, void 0, void 0, function* () {
            const options = Object.assign({}, defaultCreateSchematicsOptions);
            const tree = yield schematicRunner
                .runSchematicAsync("create-schematics", options, appTree)
                .toPromise();
            expect(tree.files).toEqual(expect.arrayContaining(schematicResultFiles));
        }));
        it("fails with missing tree", (done) => {
            const options = Object.assign({}, defaultCreateSchematicsOptions);
            schematicRunner
                .runSchematicAsync("create-schematics", options, schematics_1.Tree.empty())
                .subscribe({
                error: (err) => {
                    expect(err).toBeTruthy();
                    done();
                },
            });
        });
        it("fails with missing params: name", (done) => {
            schematicRunner
                .runSchematicAsync("create-schematics", {}, appTree)
                .subscribe({
                error: (err) => {
                    expect(err).toBeTruthy();
                    done();
                },
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,