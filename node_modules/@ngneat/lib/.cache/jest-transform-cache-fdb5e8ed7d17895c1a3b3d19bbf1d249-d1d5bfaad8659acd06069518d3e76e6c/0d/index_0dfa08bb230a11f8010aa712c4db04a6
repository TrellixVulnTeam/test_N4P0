d970b67e8680f4d846e36e6186b08482
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lib = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const helpers_1 = require("../utils/helpers");
const add_dependencies_1 = require("./add-dependencies");
const add_ng_cli_ghpages_1 = require("./add-ng-cli-ghpages");
const add_root_files_1 = require("./add-root-files");
const add_spectator_1 = require("./add-spectator");
const create_lib_1 = require("./create-lib");
const create_schematics_1 = require("./create-schematics");
const lint_fix_1 = require("./lint-fix");
const update_package_json_1 = require("./update-package-json");
function rulify(obj) {
    const rule = (tree, context) => {
        return typeof obj === "function" ? obj(tree, context) : obj;
    };
    return rule;
}
function lib(options) {
    return (tree, _context) => {
        if (tree.exists("README.md")) {
            tree.delete("README.md");
        }
        options = helpers_1.splitScopeFromName(options);
        const scopeWithName = options.scope
            ? `${options.scope}/${options.name}`
            : options.name;
        const isNx = tree.exists("/nx.json");
        const libPath = helpers_1.getLibPath(scopeWithName, isNx);
        const updatePackageJsonRule = update_package_json_1.updatePackageJson(libPath, scopeWithName, options);
        const installDepsRule = add_dependencies_1.installDependencies(options);
        const libRule = options.skipLib
            ? schematics_1.noop()
            : rulify(create_lib_1.createLib(options, scopeWithName, libPath, tree, _context, isNx));
        const addSpectatorRule = !(options.skipLib || options.skipSpectator)
            ? add_spectator_1.addSpectator(options, scopeWithName)
            : schematics_1.noop();
        const filesRule = add_root_files_1.addFiles(options, scopeWithName, tree);
        const schematicsRule = options.skipSchematics
            ? schematics_1.noop()
            : create_schematics_1.createSchematicsWithLib(options, scopeWithName);
        const angularCliGhPagesRule = options.skipAngularCliGhPages
            ? schematics_1.noop()
            : add_ng_cli_ghpages_1.addAngularCliGhPages();
        const lintFixRule = lint_fix_1.lintFix(scopeWithName);
        return schematics_1.chain([
            libRule,
            filesRule,
            schematicsRule,
            updatePackageJsonRule,
            installDepsRule,
            addSpectatorRule,
            angularCliGhPagesRule,
            lintFixRule,
        ]);
    };
}
exports.lib = lib;
//# sourceMappingURL=index.js.map