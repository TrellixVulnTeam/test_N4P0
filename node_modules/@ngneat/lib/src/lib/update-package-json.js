"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updatePackageJson = void 0;
const package_1 = require("../utils/package");
function scriptsToAdd(libPath, libName, skipLib, skipSchematics) {
    const basicScripts = {
        "contributors:add": "all-contributors add",
        "hooks:pre-commit": "node hooks/pre-commit.js",
        commit: "cz",
    };
    if (skipLib) {
        return Object.assign(Object.assign({}, basicScripts), { "test:headless": "cross-env CI=true npm run test" });
    }
    const distPath = libName.replace("@", "");
    const libsScripts = {
        deploy: `ng deploy --base-href=https://username.github.io/repo/`,
        copy: `cpx README.md dist/${distPath}`,
        "build:lib": `ng build ${libName} --prod && npm run copy`,
        "test:lib": `ng test ${libName}`,
        "test:lib:headless": "cross-env CI=true npm run test:lib",
    };
    if (skipSchematics) {
        return Object.assign(Object.assign({}, basicScripts), libsScripts);
    }
    const schematicsScripts = {
        "postbuild:lib": `npm run build --prefix ${libPath}`,
        "semantic-release": "semantic-release",
    };
    return Object.assign(Object.assign(Object.assign({}, basicScripts), libsScripts), schematicsScripts);
}
function generateHooks() {
    return {
        hooks: {
            "commit-msg": "commitlint -E HUSKY_GIT_PARAMS",
            "pre-commit": "npm run hooks:pre-commit && lint-staged",
        },
    };
}
const config = {
    commitizen: {
        path: "cz-conventional-changelog",
    },
};
const lintStaged = {
    "*.{js,json,css,scss,ts,html,component.html}": ["prettier --write"],
};
function updatePackageJson(libPath, libName, options) {
    return (host, context) => {
        context.logger.info("âŒ› Updating root package.json...");
        const json = package_1.getPackageJson(host);
        json["config"] = config;
        json["lint-staged"] = lintStaged;
        json["scripts"] = Object.assign(Object.assign({}, json.scripts), scriptsToAdd(libPath, libName, !!options.skipLib, options.skipSchematics));
        json["husky"] = generateHooks();
        package_1.setPackageJson(host, json);
        return host;
    };
}
exports.updatePackageJson = updatePackageJson;
//# sourceMappingURL=update-package-json.js.map