"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyFiles = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const stringifyObject = require("stringify-object");
function copyFiles(importModule, options, importStatement, scopeWithName, packages, tree, project, onlySchematics = false) {
    const importModuleSet = stringifyObject(importModule
        ? [
            {
                moduleName: `${core_1.strings.classify(options.name)}Module`,
                importModuleStatement: importStatement,
                importPath: scopeWithName,
            },
        ]
        : [], { singleQuotes: true, indent: "  " });
    let packagesWithVersion = [];
    if (packages.length > 1) {
        packagesWithVersion = packages
            .map((i) => i.trim())
            .map((i) => {
            const lastIndex = i.lastIndexOf("@");
            if (lastIndex < 0) {
                throw new schematics_1.SchematicsException(`Invalid package syntax for: ${i}. Valid format is: <PACKAGE_NAME>@<PACKAGE_VERSION>`);
            }
            return {
                name: i.substr(0, lastIndex),
                version: i.substr(lastIndex + 1),
            };
        });
    }
    const depthFromRootLib = "../" +
        scopeWithName
            .split("/")
            .map(() => "..")
            .join("/");
    const libDistPath = scopeWithName.replace("@", "");
    const fileDepth = !onlySchematics ? "." : "..";
    const templateSource = schematics_1.apply(schematics_1.url(`${fileDepth}/files/schematics`), [
        schematics_1.template({
            classify: core_1.strings.classify,
            scopeWithName,
            importStatement,
            packagesWithVersion: stringifyObject(packagesWithVersion, {
                singleQuotes: true,
                indent: "  ",
            }),
            importModuleSet,
            parse: JSON.parse,
            depthFromRootLib,
            libDistPath,
            name: options.name,
        }),
        schematics_1.filter((path) => !tree.exists(path)),
        schematics_1.move(core_1.normalize(`${project.sourceRoot}/..`)),
    ]);
    return templateSource;
}
exports.copyFiles = copyFiles;
//# sourceMappingURL=copy-files.js.map