"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitScopeFromName = exports.getLibPath = exports.createHost = exports.toTree = exports.observify = exports.isPromise = exports.isFunction = void 0;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const rxjs_1 = require("rxjs");
function isFunction(val) {
    return typeof val === "function";
}
exports.isFunction = isFunction;
function isPromise(v) {
    return v && isFunction(v.then);
}
exports.isPromise = isPromise;
function observify(asyncOrValue) {
    if (isPromise(asyncOrValue) || rxjs_1.isObservable(asyncOrValue)) {
        return rxjs_1.from(asyncOrValue);
    }
    return rxjs_1.of(asyncOrValue);
}
exports.observify = observify;
function toTree(ruleOrTree, tree, context) {
    return isFunction(ruleOrTree)
        ? ruleOrTree(tree, context)
        : ruleOrTree;
}
exports.toTree = toTree;
function createHost(tree) {
    return {
        readFile(path) {
            return __awaiter(this, void 0, void 0, function* () {
                const data = tree.read(path);
                if (!data) {
                    throw new schematics_1.SchematicsException("File not found.");
                }
                return core_1.virtualFs.fileBufferToString(data);
            });
        },
        writeFile(path, data) {
            return __awaiter(this, void 0, void 0, function* () {
                return tree.overwrite(path, data);
            });
        },
        isDirectory(path) {
            return __awaiter(this, void 0, void 0, function* () {
                return !tree.exists(path) && tree.getDir(path).subfiles.length > 0;
            });
        },
        isFile(path) {
            return __awaiter(this, void 0, void 0, function* () {
                return tree.exists(path);
            });
        },
    };
}
exports.createHost = createHost;
function getLibPath(scopeWithName, isNx) {
    return `${isNx ? "libs" : "projects"}/${scopeWithName}`.replace("@", "");
}
exports.getLibPath = getLibPath;
function splitScopeFromName(options) {
    if (!options.scope && options.name.includes("/")) {
        const splittedNameAndScope = options.name.split("/");
        options.scope = splittedNameAndScope[0];
        options.name = splittedNameAndScope[1];
    }
    return options;
}
exports.splitScopeFromName = splitScopeFromName;
//# sourceMappingURL=helpers.js.map