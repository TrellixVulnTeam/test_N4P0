import { HttpClient } from '@angular/common/http';
import { HttpTestingController } from '@angular/common/http/testing';
import { TestBed } from '@angular/core/testing';
import { isType } from '../types';
import { initialHttpModule } from './initial-module';
import { getDefaultHttpOptions } from './options';
import { SpectatorHttp } from './spectator-http';
import { overrideModules } from '../spectator/create-factory';
/**
 * @publicApi
 */
export function createHttpFactory(typeOrOptions) {
    const service = isType(typeOrOptions) ? typeOrOptions : typeOrOptions.service;
    const options = isType(typeOrOptions) ? getDefaultHttpOptions({ service }) : getDefaultHttpOptions(typeOrOptions);
    const moduleMetadata = initialHttpModule(options);
    beforeEach(() => {
        TestBed.configureTestingModule(moduleMetadata);
        overrideModules(options);
    });
    afterEach(() => {
        if (TestBed.inject) {
            TestBed.inject(HttpTestingController).verify();
        }
        else {
            TestBed.get(HttpTestingController).verify();
        }
    });
    return (overrides) => {
        const defaults = { providers: [] };
        const { providers } = Object.assign(Object.assign({}, defaults), overrides);
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        /**
         * Back compatibility, angular under 9 version doesnt have a inject function
         */
        if (!TestBed.inject) {
            return new SpectatorHttp(TestBed.get(service), TestBed.get(HttpClient), TestBed.get(HttpTestingController));
        }
        return new SpectatorHttp(TestBed.inject(service), TestBed.inject(HttpClient), TestBed.inject(HttpTestingController));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9zcGVjdGF0b3ItaHR0cC9jcmVhdGUtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFckUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR2hELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDckQsT0FBTyxFQUFFLHFCQUFxQixFQUF3QixNQUFNLFdBQVcsQ0FBQztBQUN4RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBYTlEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFJLGFBQWdEO0lBQ25GLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO0lBQzlFLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNySCxNQUFNLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVsRCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQy9DLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2hEO2FBQU07WUFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDN0M7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxTQUFrQyxFQUFFLEVBQUU7UUFDNUMsTUFBTSxRQUFRLEdBQTJCLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQzNELE1BQU0sRUFBRSxTQUFTLEVBQUUsbUNBQVEsUUFBUSxHQUFLLFNBQVMsQ0FBRSxDQUFDO1FBRXBELElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDakMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWtCLEVBQUUsRUFBRTtnQkFDdkMsT0FBTyxDQUFDLGdCQUFnQixDQUFFLFFBQWdCLENBQUMsT0FBTyxFQUFFLFFBQWUsQ0FBQyxDQUFDO1lBQ3ZFLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRDs7V0FFRztRQUNILElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ25CLE9BQU8sSUFBSSxhQUFhLENBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO1NBQ2hIO1FBRUQsT0FBTyxJQUFJLGFBQWEsQ0FBSSxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDMUgsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBIdHRwVGVzdGluZ0NvbnRyb2xsZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cC90ZXN0aW5nJztcbmltcG9ydCB7IFByb3ZpZGVyLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUZXN0QmVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcblxuaW1wb3J0IHsgQmFzZVNwZWN0YXRvck92ZXJyaWRlcyB9IGZyb20gJy4uL2Jhc2Uvb3B0aW9ucyc7XG5pbXBvcnQgeyBpc1R5cGUgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7IGluaXRpYWxIdHRwTW9kdWxlIH0gZnJvbSAnLi9pbml0aWFsLW1vZHVsZSc7XG5pbXBvcnQgeyBnZXREZWZhdWx0SHR0cE9wdGlvbnMsIFNwZWN0YXRvckh0dHBPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IFNwZWN0YXRvckh0dHAgfSBmcm9tICcuL3NwZWN0YXRvci1odHRwJztcbmltcG9ydCB7IG92ZXJyaWRlTW9kdWxlcyB9IGZyb20gJy4uL3NwZWN0YXRvci9jcmVhdGUtZmFjdG9yeSc7XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgdHlwZSBTcGVjdGF0b3JIdHRwRmFjdG9yeTxTPiA9IChvdmVycmlkZXM/OiBDcmVhdGVIdHRwT3ZlcnJpZGVzPFM+KSA9PiBTcGVjdGF0b3JIdHRwPFM+O1xuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1pbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlSHR0cE92ZXJyaWRlczxTPiBleHRlbmRzIEJhc2VTcGVjdGF0b3JPdmVycmlkZXMge31cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIdHRwRmFjdG9yeTxTPih0eXBlT3JPcHRpb25zOiBUeXBlPFM+IHwgU3BlY3RhdG9ySHR0cE9wdGlvbnM8Uz4pOiBTcGVjdGF0b3JIdHRwRmFjdG9yeTxTPiB7XG4gIGNvbnN0IHNlcnZpY2UgPSBpc1R5cGUodHlwZU9yT3B0aW9ucykgPyB0eXBlT3JPcHRpb25zIDogdHlwZU9yT3B0aW9ucy5zZXJ2aWNlO1xuICBjb25zdCBvcHRpb25zID0gaXNUeXBlKHR5cGVPck9wdGlvbnMpID8gZ2V0RGVmYXVsdEh0dHBPcHRpb25zPFM+KHsgc2VydmljZSB9KSA6IGdldERlZmF1bHRIdHRwT3B0aW9ucyh0eXBlT3JPcHRpb25zKTtcbiAgY29uc3QgbW9kdWxlTWV0YWRhdGEgPSBpbml0aWFsSHR0cE1vZHVsZShvcHRpb25zKTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUobW9kdWxlTWV0YWRhdGEpO1xuICAgIG92ZXJyaWRlTW9kdWxlcyhvcHRpb25zKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBpZiAoVGVzdEJlZC5pbmplY3QpIHtcbiAgICAgIFRlc3RCZWQuaW5qZWN0KEh0dHBUZXN0aW5nQ29udHJvbGxlcikudmVyaWZ5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFRlc3RCZWQuZ2V0KEh0dHBUZXN0aW5nQ29udHJvbGxlcikudmVyaWZ5KCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gKG92ZXJyaWRlcz86IENyZWF0ZUh0dHBPdmVycmlkZXM8Uz4pID0+IHtcbiAgICBjb25zdCBkZWZhdWx0czogQ3JlYXRlSHR0cE92ZXJyaWRlczxTPiA9IHsgcHJvdmlkZXJzOiBbXSB9O1xuICAgIGNvbnN0IHsgcHJvdmlkZXJzIH0gPSB7IC4uLmRlZmF1bHRzLCAuLi5vdmVycmlkZXMgfTtcblxuICAgIGlmIChwcm92aWRlcnMgJiYgcHJvdmlkZXJzLmxlbmd0aCkge1xuICAgICAgcHJvdmlkZXJzLmZvckVhY2goKHByb3ZpZGVyOiBQcm92aWRlcikgPT4ge1xuICAgICAgICBUZXN0QmVkLm92ZXJyaWRlUHJvdmlkZXIoKHByb3ZpZGVyIGFzIGFueSkucHJvdmlkZSwgcHJvdmlkZXIgYXMgYW55KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJhY2sgY29tcGF0aWJpbGl0eSwgYW5ndWxhciB1bmRlciA5IHZlcnNpb24gZG9lc250IGhhdmUgYSBpbmplY3QgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBpZiAoIVRlc3RCZWQuaW5qZWN0KSB7XG4gICAgICByZXR1cm4gbmV3IFNwZWN0YXRvckh0dHA8Uz4oVGVzdEJlZC5nZXQoc2VydmljZSksIFRlc3RCZWQuZ2V0KEh0dHBDbGllbnQpLCBUZXN0QmVkLmdldChIdHRwVGVzdGluZ0NvbnRyb2xsZXIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNwZWN0YXRvckh0dHA8Uz4oVGVzdEJlZC5pbmplY3Qoc2VydmljZSksIFRlc3RCZWQuaW5qZWN0KEh0dHBDbGllbnQpLCBUZXN0QmVkLmluamVjdChIdHRwVGVzdGluZ0NvbnRyb2xsZXIpKTtcbiAgfTtcbn1cbiJdfQ==