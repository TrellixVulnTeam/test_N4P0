/** Credit: https://github.com/unindented/custom-jquery-matchers/tree/master/packages/custom-jquery-matchers */
/* eslint-disable no-shadow, @typescript-eslint/no-shadow */
import $ from 'jquery';
import { hex2rgb, isHex, trim } from './internals/rgb-to-hex';
import { isHTMLOptionElementArray, isObject } from './types';
import { isRunningInJsDom, coerceArray } from './utils';
const hasProperty = (actual, expected) => {
    return expected === undefined ? actual !== undefined : actual === expected;
};
const ɵ0 = hasProperty;
const containsProperty = (actual, expected) => {
    return expected === undefined ? true : actual.includes(expected);
};
const ɵ1 = containsProperty;
const checkProperty = (el, prop, predicate) => {
    let pass = false;
    let failing = '';
    for (const key of Object.keys(prop)) {
        const actual = $(el).prop(key);
        const addendum = prop[key] !== undefined ? ` with value '${prop[key]}'` : '';
        pass = predicate(actual, prop[key]);
        failing = !pass ? `'${prop}'${addendum}, but had '${actual}'` : '';
    }
    const message = () => `Expected element${pass ? ' not' : ''} to have property ${failing}`;
    return { pass, message };
};
const ɵ2 = checkProperty;
const hasCss = (el, css) => {
    let prop;
    let value;
    const $el = $(el);
    for (prop in css) {
        if (css.hasOwnProperty(prop)) {
            value = css[prop];
            if (isHex(value)) {
                value = hex2rgb(css[prop]);
            }
            if (value === 'auto' && $el.get(0).style[prop] === 'auto') {
                continue;
            }
            if (trim($el.css(prop)) !== trim(value) && trim(el.style[prop]) !== trim(value)) {
                return false;
            }
        }
    }
    return true;
};
const ɵ3 = hasCss;
const hasSameText = (el, expected, exact = false) => {
    if (expected && Array.isArray(expected)) {
        let actual;
        let pass = false;
        let failing;
        $(el).each((i, e) => {
            actual = exact ? $(e).text() : $.trim($(e).text());
            pass = exact ? actual === expected[i] : actual.includes(expected[i]);
            if (!pass) {
                failing = expected[i];
                return false;
            }
        });
        const message = () => `Expected element${pass ? ' not' : ''} to have ${exact ? 'exact' : ''} text '${failing}', but had '${actual}'`;
        return { pass, message };
    }
    const actual = exact ? $(el).text() : $.trim($(el).text());
    if (expected && typeof expected !== 'string') {
        const pass = expected(actual);
        const message = () => `Expected element${pass ? ' not' : ''} to have ${exact ? 'exact' : ''} text matching '${expected}',` + ` but had '${actual}'`;
        return { pass, message };
    }
    const pass = exact && !Array.isArray(expected) ? actual === expected : actual.indexOf(expected) !== -1;
    const message = () => `Expected element${pass ? ' not' : ''} to have ${exact ? 'exact' : ''} text '${expected}', but had '${actual}'`;
    return { pass, message };
};
const ɵ4 = hasSameText;
const comparator = (func) => () => ({
    compare: func,
});
const ɵ5 = comparator;
const ɵ6 = (el) => {
    const actual = $(el).length;
    const pass = actual > 0;
    const message = () => `Expected ${el} element${pass ? ' not' : ''} to exist`;
    return { pass, message };
};
/**
 *
 * expect('.zippy__content').not.toExist();
 */
export const toExist = comparator(ɵ6);
const ɵ7 = (el, expected) => {
    const actual = $(el).length;
    const pass = actual === expected;
    const message = () => `Expected element${pass ? ' not' : ''} to have length ${expected}, but had ${actual}`;
    return { pass, message };
};
/**
 *
 * expect('.zippy__content').toHaveLength(3);
 */
export const toHaveLength = comparator(ɵ7);
const ɵ8 = (el, expected) => {
    const actual = $(el).attr('id');
    const pass = actual === expected;
    const message = () => `Expected element${pass ? ' not' : ''} to have ID '${expected}', but had '${actual}'`;
    return { pass, message };
};
/**
 *
 * expect('.zippy__content').toHaveId('ID');
 */
export const toHaveId = comparator(ɵ8);
const ɵ9 = (el, expected, options = { strict: true }) => {
    if (expected && Array.isArray(expected)) {
        const actual = $(el).attr('class');
        const expectedClasses = expected.join(' ');
        const pass = options.strict ? $(el).hasClass(expectedClasses) : expected.every((e) => $(el).hasClass(e));
        const message = () => `Expected element${pass ? ' not' : ''} to have value '${expectedClasses}', but had '${actual}'`;
        return { pass, message };
    }
    const actual = $(el).attr('class');
    const pass = $(el).hasClass(expected);
    const message = () => `Expected element${pass ? ' not' : ''} to have class '${expected}', but had '${actual}'`;
    return { pass, message };
};
/**
 * This validates classes in strict order. If you want to validate classes in any order,
 * just set the strict config option to false.
 *
 * expect('.zippy__content').toHaveClass('class');
 * expect('.zippy__content').toHaveClass('class-a, class-b');
 * expect('.zippy__content').toHaveClass(['class-a, class-b']);
 * expect('.zippy__content').toHaveClass(['class-b, class-a']);
 * expect('.zippy__content').not.toHaveClass(['class-b, class-a'], { strict: true });
 */
export const toHaveClass = comparator(ɵ9);
const ɵ10 = (el, attr, val) => {
    if (isObject(attr)) {
        let pass = false;
        let failing;
        for (const key of Object.keys(attr)) {
            const actual = $(el).attr(key);
            const addendum = attr[key] !== undefined ? ` with value '${attr[key]}'` : '';
            pass = hasProperty(actual, attr[key]);
            failing = !pass ? `'${attr}'${addendum}, but had '${actual}'` : '';
        }
        const message = () => `Expected element${pass ? ' not' : ''} to have attribute ${failing}`;
        return { pass, message };
    }
    const actual = $(el).attr(attr);
    const addendum = val !== undefined ? ` with value '${val}'` : '';
    const pass = hasProperty(actual, val);
    const message = () => `Expected element${pass ? ' not' : ''} to have attribute '${attr}'${addendum}, but had '${actual}'`;
    return { pass, message };
};
/**
 * expect(host.query('.zippy')).toHaveAttribute('id', 'zippy');
 */
export const toHaveAttribute = comparator(ɵ10);
const ɵ11 = (el, prop, val) => {
    if (isObject(prop)) {
        return checkProperty(el, prop, hasProperty);
    }
    const actual = $(el).prop(prop);
    const addendum = val !== undefined ? ` with value '${val}'` : '';
    const pass = hasProperty(actual, val);
    const message = () => `Expected element${pass ? ' not' : ''} to have property '${prop}'${addendum}, but had '${actual}'`;
    return { pass, message };
};
/**
 *  expect(host.query('.checkbox')).toHaveProperty('checked', true);
 *  expect(host.query('.checkbox')).toHaveProperty({checked: true});
 */
export const toHaveProperty = comparator(ɵ11);
const ɵ12 = (el, prop, val) => {
    if (isObject(prop)) {
        return checkProperty(el, prop, containsProperty);
    }
    const actual = $(el).prop(prop);
    const addendum = val !== undefined ? ` with value '${val}'` : '';
    const pass = containsProperty(actual, val);
    const message = () => `Expected element${pass ? ' not' : ''} to have property '${prop}'${addendum}, but had '${actual}'`;
    return { pass, message };
};
export const toContainProperty = comparator(ɵ12);
const ɵ13 = (el, expected, exact = false) => hasSameText(el, expected, exact);
/**
 *
 * expect('.zippy__content').toHaveText('Content');
 * expect('.zippy__content').toHaveText(['Content A', 'Content B']);
 *
 * expect('.zippy__content').toHaveText((text) => text.includes('..');
 */
export const toHaveText = comparator(ɵ13);
const ɵ14 = (el, expected) => hasSameText(el, expected, true);
export const toHaveExactText = comparator(ɵ14);
export const toContainText = toHaveText;
const ɵ15 = (el, expected) => {
    if (expected && Array.isArray(expected)) {
        let actual;
        let pass = false;
        let failing;
        $(el).each((i, e) => {
            actual = $(e).val();
            pass = actual === expected[i];
            if (!pass) {
                failing = expected[i];
                return false;
            }
        });
        const message = () => `Expected element${pass ? ' not' : ''} to have value '${failing}', but had '${actual}'`;
        return { pass, message };
    }
    const actual = $(el).val();
    const pass = actual === expected;
    const message = () => `Expected element${pass ? ' not' : ''} to have value '${expected}', but had '${actual}'`;
    return { pass, message };
};
/**
 *
 * expect('.zippy__content').toHaveValue('value');
 * expect('.zippy__content').toHaveValue(['value a', 'value b']);
 */
export const toHaveValue = comparator(ɵ15);
export const toContainValue = toHaveValue;
const ɵ16 = (el, expected) => {
    const pass = hasCss(el, expected);
    const message = () => `Expected element${pass ? ' not' : ''} to have CSS ${JSON.stringify(expected)}`;
    return { pass, message };
};
/**
 *
 *  expect(host.element).toHaveStyle({
 *    backgroundColor: 'rgba(0, 0, 0, 0.1)'
 *  });
 */
export const toHaveStyle = comparator(ɵ16);
const ɵ17 = (el, { data, val }) => {
    const actual = $(el).data(data);
    const addendum = val !== undefined ? ` with value '${val}'` : '';
    const pass = hasProperty(actual, val);
    const message = () => `Expected element${pass ? ' not' : ''} to have data '${data}'${addendum}, but had '${actual}'`;
    return { pass, message };
};
/**
 *
 * expect('.zippy__content').toHaveData({data: 'role', val: 'admin'});
 */
export const toHaveData = comparator(ɵ17);
const ɵ18 = (el) => {
    const pass = $(el).is(':checked');
    const message = () => `Expected element${pass ? ' not' : ''} to be checked`;
    return { pass, message };
};
/**
 *
 * expect('.checkbox').toBeChecked();
 */
export const toBeChecked = comparator(ɵ18);
const ɵ19 = (el) => {
    const pass = $(el).is(':disabled');
    const message = () => `Expected element${pass ? ' not' : ''} to be disabled`;
    return { pass, message };
};
/**
 *
 * expect('.checkbox').toBeDisabled();
 */
export const toBeDisabled = comparator(ɵ19);
const ɵ20 = (el) => {
    const pass = $(el).is(':empty');
    const message = () => `Expected element${pass ? ' not' : ''} to be empty`;
    return { pass, message };
};
/**
 * An empty element is an element without child elements or text.
 *
 * expect('div').toBeEmpty();
 */
export const toBeEmpty = comparator(ɵ20);
const ɵ21 = (actual, expected) => {
    const mapToPropsAndValues = (values, properties) => {
        return properties.map((prop) => {
            return {
                name: prop,
                value: values[prop],
                type: typeof values[prop],
            };
        });
    };
    const actualProps = Object.getOwnPropertyNames(actual);
    const actualPropsAndValues = mapToPropsAndValues(actual, actualProps);
    const expectedProps = Object.getOwnPropertyNames(expected);
    const expectedPropsAndValues = mapToPropsAndValues(expected, expectedProps);
    const pass = expectedProps.every((expectedProp) => actual[expectedProp] === expected[expectedProp]);
    const message = () => `Expected element${pass ? ' not' : ''} to contain properties: ${JSON.stringify(expectedPropsAndValues)}.`.concat(` Actual properties: ${JSON.stringify(actualPropsAndValues)}`);
    return { pass, message };
};
/**
 * Verify if an object has some expected properties.
 *
 * const actual = { lorem: 'first', ipsum: 'second' };
 * expect(actual).toBePartial({ lorem: 'first' });
 */
export const toBePartial = comparator(ɵ21);
/**
 * Hidden elements are elements that have:
 * 1. Display property set to "none"
 * 2. Width and height set to 0 (check not applied in jest)
 * 3. A hidden parent element (this also hides child elements)
 * 4. Type equal to "hidden" (only for form elements)
 * 5. A "hidden" attribute
 */
function isHidden(elOrSelector) {
    let el = $(elOrSelector)[0];
    if (!el) {
        return true;
    }
    const hiddenWhen = [
        (el) => !(el.offsetWidth || el.offsetHeight || el.getClientRects().length),
        (el) => el.style.display === 'none',
        (el) => el.style.visibility === 'hidden',
        (el) => el.type === 'hidden',
        (el) => el.hasAttribute('hidden'),
    ];
    if (isRunningInJsDom()) {
        // When running in JSDOM (Jest), offset-properties and client rects are always reported as 0
        // - hence, let's take a more "naive" approach here. (https://github.com/jsdom/jsdom/issues/135)
        hiddenWhen.shift();
    }
    while (el) {
        if (el === document) {
            break;
        }
        if (hiddenWhen.some((rule) => rule(el))) {
            return true;
        }
        el = el.parentNode;
    }
    return false;
}
const ɵ22 = (el) => {
    const pass = isHidden(el);
    const message = () => `Expected element${pass ? ' not' : ''} to be hidden`;
    return { pass, message };
};
/**
 * Hidden elements are elements that have:
 * 1. Display property set to "none"
 * 2. Width and height set to 0
 * 3. A hidden parent element (this also hides child elements)
 * 4. Type equal to "hidden" (only for form elements)
 * 5. A "hidden" attribute
 *
 * expect('div').toBeHidden();
 *
 */
export const toBeHidden = comparator(ɵ22);
const ɵ23 = (el) => {
    const pass = $(el).is(':selected');
    const message = () => `Expected element${pass ? ' not' : ''} to be selected`;
    return { pass, message };
};
/**
 * The :selected selector selects option elements that are pre-selected.
 *
 * expect('div').toBeSelected();
 *
 */
export const toBeSelected = comparator(ɵ23);
const ɵ24 = (el) => {
    const pass = !isHidden(el);
    const message = () => `Expected element${pass ? ' not' : ''} to be visible`;
    return { pass, message };
};
/**
 * Hidden elements are elements that have:
 * 1. Display property set to "none"
 * 2. Width and height set to 0
 * 3. A hidden parent element (this also hides child elements)
 * 4. Type equal to "hidden" (only for form elements)
 * 5. A "hidden" attribute
 *
 * expect('div').toBeVisible();
 *
 */
export const toBeVisible = comparator(ɵ24);
const ɵ25 = (el) => {
    const element = $(el).get(0);
    const pass = element === element.ownerDocument.activeElement;
    const message = () => `Expected element${pass ? ' not' : ''} to be focused`;
    return { pass, message };
};
/**
 * The :focus selector selects the element that currently has focus.
 *
 * expect('input').toBeFocused();
 */
export const toBeFocused = comparator(ɵ25);
const ɵ26 = (el, expected) => {
    const actual = $(el).filter(expected).length;
    const pass = actual > 0;
    const message = () => `Expected element${pass ? ' not' : ''} to be matched by '${expected}'`;
    return { pass, message };
};
/**
 * Check to see if the set of matched elements matches the given selector
 * returns true if the dom contains the element
 *
 * expect('div').toBeMatchedBy('.js-something')
 */
export const toBeMatchedBy = comparator(ɵ26);
const ɵ27 = (el, selector) => {
    const actual = $(el).find(selector).length;
    const pass = actual > 0;
    const message = () => `Expected element${pass ? ' not' : ''} to contain child '${selector}'`;
    return { pass, message };
};
/**
 *
 * expect('div').toHaveDescendant('.child')
 */
export const toHaveDescendant = comparator(ɵ27);
const ɵ28 = (el, { selector, text }) => {
    const actual = $.trim($(el).find(selector).text());
    if (text && $.isFunction(text.test)) {
        const pass = text.test(actual);
        const message = () => `Expected element${pass ? ' not' : ''} to have descendant '${selector}' with text matching '${text}',` + ` but had '${actual}'`;
        return { pass, message };
    }
    const pass = actual.indexOf(text) !== -1;
    const message = () => `Expected element${pass ? ' not' : ''} to have descendant '${selector}' with text '${text}', but had '${actual}'`;
    return { pass, message };
};
/**
 *
 * expect('div').toHaveDescendantWithText({selector: '.child', text: 'text'})
 */
export const toHaveDescendantWithText = comparator(ɵ28);
const ɵ29 = (el, expected) => {
    var _a;
    if (expected instanceof HTMLOptionElement) {
        const actual = $(el).find(':selected');
        const pass = actual.is($(expected));
        const message = () => `Expected element${pass ? ' not' : ''} to have options '[${expected.outerHTML}]' but had '[${actual[0].outerHTML}]'`;
        return { pass, message };
    }
    if (isHTMLOptionElementArray(expected)) {
        const actual = $(el).find(':selected');
        const pass = actual.length === expected.length && actual.toArray().every((_, index) => $(actual[index]).is(expected[index]));
        const expectedOptionsString = $(expected)
            .get()
            .map((option) => option.outerHTML)
            .join(',');
        const actualOptionsString = actual
            .get()
            .map((option) => option.outerHTML)
            .join(',');
        const message = () => `Expected element${pass ? ' not' : ''} to have options '[${expectedOptionsString}]' but had '[${actualOptionsString}]'`;
        return { pass, message };
    }
    const actual = $(el).val();
    const pass = (_a = coerceArray(expected)) === null || _a === void 0 ? void 0 : _a.every((v) => actual.includes(v));
    const expectedOptionsString = Array.isArray(expected)
        ? expected.reduce((acc, val, i) => acc + `${i === expected.length ? '' : ','}${val}`)
        : expected;
    const message = () => `Expected element${pass ? ' not' : ''} to have options '[${expectedOptionsString}]' but had '[${actual}]'`;
    return { pass, message };
};
export const toHaveSelectedOptions = comparator(ɵ29);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13, ɵ14, ɵ15, ɵ16, ɵ17, ɵ18, ɵ19, ɵ20, ɵ21, ɵ22, ɵ23, ɵ24, ɵ25, ɵ26, ɵ27, ɵ28, ɵ29 };
//# sourceMappingURL=data:application/json;base64,