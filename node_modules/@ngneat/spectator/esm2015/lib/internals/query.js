import { SimpleChange } from '@angular/core';
import { By } from '@angular/platform-browser';
import { DOMSelector } from '../dom-selectors';
import { isString } from '../types';
export function getChildren(debugElementRoot) {
    return (directiveOrSelector, options = { root: false, read: undefined }) => {
        if (directiveOrSelector instanceof DOMSelector) {
            return directiveOrSelector.execute(debugElementRoot.nativeElement);
        }
        const debugElements = debugElementRoot.queryAll(isString(directiveOrSelector) ? By.css(directiveOrSelector) : By.directive(directiveOrSelector));
        if (options.read) {
            return debugElements.map((debug) => debug.injector.get(options.read));
        }
        if (isString(directiveOrSelector)) {
            return debugElements.map((debug) => debug.nativeElement);
        }
        return debugElements.map((debug) => debug.injector.get(directiveOrSelector));
    };
}
export function setProps(instance, keyOrKeyValues, value, firstChange = true) {
    var _a;
    const changes = {};
    const update = (key, newValue) => {
        if (instance[key] !== newValue) {
            changes[key] = new SimpleChange(instance[key], newValue, firstChange);
        }
        instance[key] = newValue;
    };
    if (isString(keyOrKeyValues)) {
        update(keyOrKeyValues, value);
    }
    else {
        // eslint-disable-next-line guard-for-in
        for (const p in keyOrKeyValues) {
            update(p, keyOrKeyValues[p]);
        }
    }
    if (Object.keys(changes).length) {
        // eslint-disable-next-line
        (_a = instance.ngOnChanges) === null || _a === void 0 ? void 0 : _a.call(instance, changes);
    }
    return instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcGVjdGF0b3Ivc3JjL2xpYi9pbnRlcm5hbHMvcXVlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQixZQUFZLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBMkIsTUFBTSxVQUFVLENBQUM7QUFFN0QsTUFBTSxVQUFVLFdBQVcsQ0FBSSxnQkFBOEI7SUFDM0QsT0FBTyxDQUFDLG1CQUE4QixFQUFFLFVBQTJCLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQU8sRUFBRTtRQUMxRyxJQUFJLG1CQUFtQixZQUFZLFdBQVcsRUFBRTtZQUM5QyxPQUFPLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQVUsQ0FBQztTQUM3RTtRQUVELE1BQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FDN0MsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUNoRyxDQUFDO1FBRUYsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2hCLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDdkU7UUFFRCxJQUFJLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzFEO1FBRUQsT0FBTyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQVNELE1BQU0sVUFBVSxRQUFRLENBQUMsUUFBYSxFQUFFLGNBQW1CLEVBQUUsS0FBVyxFQUFFLGNBQXVCLElBQUk7O0lBQ25HLE1BQU0sT0FBTyxHQUFrQixFQUFFLENBQUM7SUFFbEMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFXLEVBQUUsUUFBYSxFQUFRLEVBQUU7UUFDbEQsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3ZFO1FBRUQsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDLENBQUM7SUFFRixJQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRTtRQUM1QixNQUFNLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQy9CO1NBQU07UUFDTCx3Q0FBd0M7UUFDeEMsS0FBSyxNQUFNLENBQUMsSUFBSSxjQUFjLEVBQUU7WUFDOUIsTUFBTSxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5QjtLQUNGO0lBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRTtRQUMvQiwyQkFBMkI7UUFDM0IsTUFBQSxRQUFRLENBQUMsV0FBVywrQ0FBcEIsUUFBUSxFQUFlLE9BQU8sQ0FBQyxDQUFDO0tBQ2pDO0lBRUQsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnRWxlbWVudCwgU2ltcGxlQ2hhbmdlLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCeSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5pbXBvcnQgeyBET01TZWxlY3RvciB9IGZyb20gJy4uL2RvbS1zZWxlY3RvcnMnO1xuaW1wb3J0IHsgaXNTdHJpbmcsIFF1ZXJ5T3B0aW9ucywgUXVlcnlUeXBlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hpbGRyZW48Uj4oZGVidWdFbGVtZW50Um9vdDogRGVidWdFbGVtZW50KTogKGRpcmVjdGl2ZU9yU2VsZWN0b3I6IFF1ZXJ5VHlwZSwgb3B0aW9ucz86IFF1ZXJ5T3B0aW9uczxSPikgPT4gUltdIHtcbiAgcmV0dXJuIChkaXJlY3RpdmVPclNlbGVjdG9yOiBRdWVyeVR5cGUsIG9wdGlvbnM6IFF1ZXJ5T3B0aW9uczxSPiA9IHsgcm9vdDogZmFsc2UsIHJlYWQ6IHVuZGVmaW5lZCB9KTogUltdID0+IHtcbiAgICBpZiAoZGlyZWN0aXZlT3JTZWxlY3RvciBpbnN0YW5jZW9mIERPTVNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gZGlyZWN0aXZlT3JTZWxlY3Rvci5leGVjdXRlKGRlYnVnRWxlbWVudFJvb3QubmF0aXZlRWxlbWVudCkgYXMgYW55W107XG4gICAgfVxuXG4gICAgY29uc3QgZGVidWdFbGVtZW50cyA9IGRlYnVnRWxlbWVudFJvb3QucXVlcnlBbGwoXG4gICAgICBpc1N0cmluZyhkaXJlY3RpdmVPclNlbGVjdG9yKSA/IEJ5LmNzcyhkaXJlY3RpdmVPclNlbGVjdG9yKSA6IEJ5LmRpcmVjdGl2ZShkaXJlY3RpdmVPclNlbGVjdG9yKVxuICAgICk7XG5cbiAgICBpZiAob3B0aW9ucy5yZWFkKSB7XG4gICAgICByZXR1cm4gZGVidWdFbGVtZW50cy5tYXAoKGRlYnVnKSA9PiBkZWJ1Zy5pbmplY3Rvci5nZXQob3B0aW9ucy5yZWFkKSk7XG4gICAgfVxuXG4gICAgaWYgKGlzU3RyaW5nKGRpcmVjdGl2ZU9yU2VsZWN0b3IpKSB7XG4gICAgICByZXR1cm4gZGVidWdFbGVtZW50cy5tYXAoKGRlYnVnKSA9PiBkZWJ1Zy5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVidWdFbGVtZW50cy5tYXAoKGRlYnVnKSA9PiBkZWJ1Zy5pbmplY3Rvci5nZXQoZGlyZWN0aXZlT3JTZWxlY3RvcikpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0UHJvcHM8VCwgSyBleHRlbmRzIHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCwgVj4oXG4gIGluc3RhbmNlOiBULFxuICBrZXk6IEssXG4gIHZhbHVlOiBWLFxuICBmaXJzdENoYW5nZT86IGJvb2xlYW5cbik6IFQgJiB7IFtLRVkgaW4gS106IFYgfTtcbmV4cG9ydCBmdW5jdGlvbiBzZXRQcm9wczxULCBLVj4oaW5zdGFuY2U6IFQsIGtleVZhbHVlcz86IEtWKTogVCAmIEtWO1xuZXhwb3J0IGZ1bmN0aW9uIHNldFByb3BzKGluc3RhbmNlOiBhbnksIGtleU9yS2V5VmFsdWVzOiBhbnksIHZhbHVlPzogYW55LCBmaXJzdENoYW5nZTogYm9vbGVhbiA9IHRydWUpOiBhbnkge1xuICBjb25zdCBjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzID0ge307XG5cbiAgY29uc3QgdXBkYXRlID0gKGtleTogc3RyaW5nLCBuZXdWYWx1ZTogYW55KTogdm9pZCA9PiB7XG4gICAgaWYgKGluc3RhbmNlW2tleV0gIT09IG5ld1ZhbHVlKSB7XG4gICAgICBjaGFuZ2VzW2tleV0gPSBuZXcgU2ltcGxlQ2hhbmdlKGluc3RhbmNlW2tleV0sIG5ld1ZhbHVlLCBmaXJzdENoYW5nZSk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Vba2V5XSA9IG5ld1ZhbHVlO1xuICB9O1xuXG4gIGlmIChpc1N0cmluZyhrZXlPcktleVZhbHVlcykpIHtcbiAgICB1cGRhdGUoa2V5T3JLZXlWYWx1ZXMsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yIChjb25zdCBwIGluIGtleU9yS2V5VmFsdWVzKSB7XG4gICAgICB1cGRhdGUocCwga2V5T3JLZXlWYWx1ZXNbcF0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhjaGFuZ2VzKS5sZW5ndGgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBpbnN0YW5jZS5uZ09uQ2hhbmdlcz8uKGNoYW5nZXMpO1xuICB9XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuIl19