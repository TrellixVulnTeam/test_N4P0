import { dispatchFakeEvent } from '../dispatch-events';
import { isRunningInJsDom } from '../utils';
/** Property added to HTML Elements to ensure we don't double-patch focus methods on an element. */
const IS_FOCUS_PATCHED_PROP = Symbol('isFocusPatched');
/** Ensures that a single set of matching focus and blur events occur when HTMLElement.focus() is called. */
class FocusEventWatcher {
    constructor(element) {
        var _a;
        this.element = element;
        /** Set to true when browser sends a blur event for priorActiveElement */
        this._blurred = false;
        /** Set to true when browser sends a focus event for element */
        this._focused = false;
        this.element.addEventListener('focus', this);
        this.priorActiveElement = element.ownerDocument.activeElement;
        (_a = this.priorActiveElement) === null || _a === void 0 ? void 0 : _a.addEventListener('blur', this);
    }
    handleEvent({ type }) {
        if (type === 'focus') {
            this._focused = true;
        }
        else if (type === 'blur') {
            this._blurred = true;
        }
    }
    /**
     * If focus and blur events haven't occurred, fire fake ones.
     */
    ensureFocusEvents() {
        var _a;
        this.element.removeEventListener('focus', this);
        (_a = this.priorActiveElement) === null || _a === void 0 ? void 0 : _a.removeEventListener('blur', this);
        // Ensure priorActiveElement is blurred
        if (!this._blurred && this.priorActiveElement) {
            dispatchFakeEvent(this.priorActiveElement, 'blur');
        }
        if (!this._focused) {
            dispatchFakeEvent(this.element, 'focus'); // Needed to cause focus event
        }
    }
}
/**
 * Patches an element's focus and blur methods to emit events consistently and predictably in tests.
 * This is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,
 * while others won't fire them at all if the browser window is not focused.
 *
 * patchElementFocus(triggerEl);
 */
export function patchElementFocus(element) {
    // https://github.com/ngneat/spectator/issues/373 - Don't patch when using JSDOM, eg in Jest
    if (!isRunningInJsDom() && (element[IS_FOCUS_PATCHED_PROP] === undefined)) {
        const originalFocus = element.focus.bind(element);
        element.focus = (options) => {
            const focusEventWatcher = new FocusEventWatcher(element);
            // Sets document.activeElement. May or may not send focus + blur events
            originalFocus(options);
            focusEventWatcher.ensureFocusEvents();
        };
        element.blur = () => dispatchFakeEvent(element, 'blur');
        element[IS_FOCUS_PATCHED_PROP] = true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC1mb2N1cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvbGliL2ludGVybmFscy9lbGVtZW50LWZvY3VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUU1QyxtR0FBbUc7QUFDbkcsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUV2RCw0R0FBNEc7QUFDNUcsTUFBTSxpQkFBaUI7SUFTckIsWUFBNkIsT0FBb0I7O1FBQXBCLFlBQU8sR0FBUCxPQUFPLENBQWE7UUFMakQseUVBQXlFO1FBQ2pFLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDekIsK0RBQStEO1FBQ3ZELGFBQVEsR0FBRyxLQUFLLENBQUM7UUFHdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO1FBQzlELE1BQUEsSUFBSSxDQUFDLGtCQUFrQiwwQ0FBRSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVNLFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBUztRQUNoQyxJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDdEI7YUFDSSxJQUFJLElBQUksS0FBSyxNQUFNLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDdEI7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxpQkFBaUI7O1FBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hELE1BQUEsSUFBSSxDQUFDLGtCQUFrQiwwQ0FBRSxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFM0QsdUNBQXVDO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUM3QyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDcEQ7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsOEJBQThCO1NBQ3pFO0lBQ0gsQ0FBQztDQUNGO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFDLE9BQW9CO0lBRXBELDRGQUE0RjtJQUM1RixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxFQUFFO1FBQ3pFLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xELE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUMxQixNQUFNLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFekQsdUVBQXVFO1lBQ3ZFLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUV2QixpQkFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3hDLENBQUMsQ0FBQTtRQUNELE9BQU8sQ0FBQyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3hELE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLElBQUksQ0FBQztLQUN2QztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkaXNwYXRjaEZha2VFdmVudCB9IGZyb20gJy4uL2Rpc3BhdGNoLWV2ZW50cyc7XG5pbXBvcnQgeyBpc1J1bm5pbmdJbkpzRG9tIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG4vKiogUHJvcGVydHkgYWRkZWQgdG8gSFRNTCBFbGVtZW50cyB0byBlbnN1cmUgd2UgZG9uJ3QgZG91YmxlLXBhdGNoIGZvY3VzIG1ldGhvZHMgb24gYW4gZWxlbWVudC4gKi9cbmNvbnN0IElTX0ZPQ1VTX1BBVENIRURfUFJPUCA9IFN5bWJvbCgnaXNGb2N1c1BhdGNoZWQnKTtcblxuLyoqIEVuc3VyZXMgdGhhdCBhIHNpbmdsZSBzZXQgb2YgbWF0Y2hpbmcgZm9jdXMgYW5kIGJsdXIgZXZlbnRzIG9jY3VyIHdoZW4gSFRNTEVsZW1lbnQuZm9jdXMoKSBpcyBjYWxsZWQuICovXG5jbGFzcyBGb2N1c0V2ZW50V2F0Y2hlciBpbXBsZW1lbnRzIEV2ZW50TGlzdGVuZXJPYmplY3Qge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgcHJpb3JBY3RpdmVFbGVtZW50OiBFbGVtZW50IHwgbnVsbDtcblxuICAvKiogU2V0IHRvIHRydWUgd2hlbiBicm93c2VyIHNlbmRzIGEgYmx1ciBldmVudCBmb3IgcHJpb3JBY3RpdmVFbGVtZW50ICovXG4gIHByaXZhdGUgX2JsdXJyZWQgPSBmYWxzZTtcbiAgLyoqIFNldCB0byB0cnVlIHdoZW4gYnJvd3NlciBzZW5kcyBhIGZvY3VzIGV2ZW50IGZvciBlbGVtZW50ICovXG4gIHByaXZhdGUgX2ZvY3VzZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcyk7XG4gICAgdGhpcy5wcmlvckFjdGl2ZUVsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICB0aGlzLnByaW9yQWN0aXZlRWxlbWVudD8uYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGhhbmRsZUV2ZW50KHsgdHlwZSB9OiBFdmVudCk6IHZvaWQge1xuICAgIGlmICh0eXBlID09PSAnZm9jdXMnKSB7XG4gICAgICB0aGlzLl9mb2N1c2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gJ2JsdXInKSB7XG4gICAgICB0aGlzLl9ibHVycmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSWYgZm9jdXMgYW5kIGJsdXIgZXZlbnRzIGhhdmVuJ3Qgb2NjdXJyZWQsIGZpcmUgZmFrZSBvbmVzLlxuICAgKi9cbiAgcHVibGljIGVuc3VyZUZvY3VzRXZlbnRzKCkge1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMpO1xuICAgIHRoaXMucHJpb3JBY3RpdmVFbGVtZW50Py5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcyk7XG5cbiAgICAvLyBFbnN1cmUgcHJpb3JBY3RpdmVFbGVtZW50IGlzIGJsdXJyZWRcbiAgICBpZiAoIXRoaXMuX2JsdXJyZWQgJiYgdGhpcy5wcmlvckFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIGRpc3BhdGNoRmFrZUV2ZW50KHRoaXMucHJpb3JBY3RpdmVFbGVtZW50LCAnYmx1cicpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fZm9jdXNlZCkge1xuICAgICAgZGlzcGF0Y2hGYWtlRXZlbnQodGhpcy5lbGVtZW50LCAnZm9jdXMnKTsgLy8gTmVlZGVkIHRvIGNhdXNlIGZvY3VzIGV2ZW50XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUGF0Y2hlcyBhbiBlbGVtZW50J3MgZm9jdXMgYW5kIGJsdXIgbWV0aG9kcyB0byBlbWl0IGV2ZW50cyBjb25zaXN0ZW50bHkgYW5kIHByZWRpY3RhYmx5IGluIHRlc3RzLlxuICogVGhpcyBpcyBuZWNlc3NhcnksIGJlY2F1c2Ugc29tZSBicm93c2VycywgbGlrZSBJRTExLCB3aWxsIGNhbGwgdGhlIGZvY3VzIGhhbmRsZXJzIGFzeW5jaHJvbm91c2x5LFxuICogd2hpbGUgb3RoZXJzIHdvbid0IGZpcmUgdGhlbSBhdCBhbGwgaWYgdGhlIGJyb3dzZXIgd2luZG93IGlzIG5vdCBmb2N1c2VkLlxuICpcbiAqIHBhdGNoRWxlbWVudEZvY3VzKHRyaWdnZXJFbCk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXRjaEVsZW1lbnRGb2N1cyhlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ25lYXQvc3BlY3RhdG9yL2lzc3Vlcy8zNzMgLSBEb24ndCBwYXRjaCB3aGVuIHVzaW5nIEpTRE9NLCBlZyBpbiBKZXN0XG4gIGlmICghaXNSdW5uaW5nSW5Kc0RvbSgpICYmIChlbGVtZW50W0lTX0ZPQ1VTX1BBVENIRURfUFJPUF0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICBjb25zdCBvcmlnaW5hbEZvY3VzID0gZWxlbWVudC5mb2N1cy5iaW5kKGVsZW1lbnQpO1xuICAgIGVsZW1lbnQuZm9jdXMgPSAob3B0aW9ucykgPT4ge1xuICAgICAgY29uc3QgZm9jdXNFdmVudFdhdGNoZXIgPSBuZXcgRm9jdXNFdmVudFdhdGNoZXIoZWxlbWVudCk7XG5cbiAgICAgIC8vIFNldHMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC4gTWF5IG9yIG1heSBub3Qgc2VuZCBmb2N1cyArIGJsdXIgZXZlbnRzXG4gICAgICBvcmlnaW5hbEZvY3VzKG9wdGlvbnMpO1xuXG4gICAgICBmb2N1c0V2ZW50V2F0Y2hlci5lbnN1cmVGb2N1c0V2ZW50cygpO1xuICAgIH1cbiAgICBlbGVtZW50LmJsdXIgPSAoKSA9PiBkaXNwYXRjaEZha2VFdmVudChlbGVtZW50LCAnYmx1cicpO1xuICAgIGVsZW1lbnRbSVNfRk9DVVNfUEFUQ0hFRF9QUk9QXSA9IHRydWU7XG4gIH1cbn1cbiJdfQ==