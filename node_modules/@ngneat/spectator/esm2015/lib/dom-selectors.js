import { queries as DOMQueries, getDefaultNormalizer } from '@testing-library/dom';
export class DOMSelector {
    // Wrap selector functions in a class to make reflection easier in getChild
    constructor(execute) {
        this.execute = execute;
    }
}
export const byLabel = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByLabelText(el, matcher, options));
export const byPlaceholder = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByPlaceholderText(el, matcher, options));
export const byText = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByText(el, matcher, options));
export const byTextContent = (matcher, options) => {
    let textContentMatcher;
    const normalizer = (options === null || options === void 0 ? void 0 : options.normalizer) || getDefaultNormalizer(options);
    const getTextContent = (elem) => { var _a; return normalizer((_a = elem.textContent) !== null && _a !== void 0 ? _a : ''); };
    if (typeof matcher === 'string') {
        textContentMatcher = (_, elem) => {
            if ((options === null || options === void 0 ? void 0 : options.exact) === false) {
                return (getTextContent(elem)
                    .toLowerCase()
                    .indexOf(matcher.toLowerCase()) >= 0);
            }
            return getTextContent(elem) === matcher;
        };
    }
    else if (matcher instanceof RegExp) {
        textContentMatcher = (_, elem) => matcher.test(getTextContent(elem));
    }
    else {
        textContentMatcher = (_, elem) => matcher(getTextContent(elem), elem);
    }
    return new DOMSelector(el => DOMQueries.queryAllByText(el, textContentMatcher, options));
};
export const byAltText = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByAltText(el, matcher, options));
export const byTitle = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByTitle(el, matcher, options));
export const byTestId = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByTestId(el, matcher, options));
export const byValue = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByDisplayValue(el, matcher, options));
export const byRole = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByRole(el, matcher, options));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLXNlbGVjdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvbGliL2RvbS1zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUtMLE9BQU8sSUFBSSxVQUFVLEVBQ3JCLG9CQUFvQixFQUVyQixNQUFNLHNCQUFzQixDQUFDO0FBTTlCLE1BQU0sT0FBTyxXQUFXO0lBQ3RCLDJFQUEyRTtJQUMzRSxZQUE0QixPQUEyQztRQUEzQyxZQUFPLEdBQVAsT0FBTyxDQUFvQztJQUFHLENBQUM7Q0FDNUU7QUFJRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQXVCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQzlELElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUU5RSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQXVCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQ3BFLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUVwRixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQStDLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQ3JGLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFFekUsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsT0FBZ0IsRUFBRSxPQUF5QyxFQUFlLEVBQUU7SUFDeEcsSUFBSSxrQkFBMkIsQ0FBQztJQUNoQyxNQUFNLFVBQVUsR0FBaUIsQ0FBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsVUFBVSxLQUFJLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RGLE1BQU0sY0FBYyxHQUFHLENBQUMsSUFBaUIsRUFBVSxFQUFFLFdBQUMsT0FBQSxVQUFVLENBQUMsTUFBQSxJQUFJLENBQUMsV0FBVyxtQ0FBSSxFQUFFLENBQUMsQ0FBQSxFQUFBLENBQUM7SUFFekYsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7UUFDL0Isa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDL0IsSUFBSSxDQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxLQUFLLE1BQUssS0FBSyxFQUFFO2dCQUM1QixPQUFPLENBQ0wsY0FBYyxDQUFDLElBQUksQ0FBQztxQkFDakIsV0FBVyxFQUFFO3FCQUNiLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQ3ZDLENBQUM7YUFDSDtZQUVELE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLE9BQU8sQ0FBQztRQUMxQyxDQUFDLENBQUM7S0FDSDtTQUFNLElBQUksT0FBTyxZQUFZLE1BQU0sRUFBRTtRQUNwQyxrQkFBa0IsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDdEU7U0FBTTtRQUNMLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUN2RTtJQUVELE9BQU8sSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzNGLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBdUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FDaEUsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBRTVFLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBdUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBRXpJLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBdUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFFM0ksTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUF1QixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUM5RCxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFFakYsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFzQyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUM1RSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTWF0Y2hlcixcbiAgTWF0Y2hlck9wdGlvbnMsXG4gIE5vcm1hbGl6ZXJGbixcbiAgU2VsZWN0b3JNYXRjaGVyT3B0aW9ucyxcbiAgcXVlcmllcyBhcyBET01RdWVyaWVzLFxuICBnZXREZWZhdWx0Tm9ybWFsaXplcixcbiAgQnlSb2xlT3B0aW9uc1xufSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L2RvbSc7XG5cbmludGVyZmFjZSBNYW5kYXRvcnlTZWxlY3Rvck1hdGNoaW5nT3B0aW9ucyBleHRlbmRzIE1hdGNoZXJPcHRpb25zIHtcbiAgc2VsZWN0b3I6IFNlbGVjdG9yTWF0Y2hlck9wdGlvbnNbJ3NlbGVjdG9yJ107XG59XG5cbmV4cG9ydCBjbGFzcyBET01TZWxlY3RvciB7XG4gIC8vIFdyYXAgc2VsZWN0b3IgZnVuY3Rpb25zIGluIGEgY2xhc3MgdG8gbWFrZSByZWZsZWN0aW9uIGVhc2llciBpbiBnZXRDaGlsZFxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgZXhlY3V0ZTogKGVsOiBIVE1MRWxlbWVudCkgPT4gSFRNTEVsZW1lbnRbXSkge31cbn1cblxuZXhwb3J0IHR5cGUgRE9NU2VsZWN0b3JGYWN0b3J5PFRPcHRpb25zIGV4dGVuZHMgTWF0Y2hlck9wdGlvbnMgPSBNYXRjaGVyT3B0aW9ucz4gPSAobWF0Y2hlcjogTWF0Y2hlciwgb3B0aW9ucz86IFRPcHRpb25zKSA9PiBET01TZWxlY3RvcjtcblxuZXhwb3J0IGNvbnN0IGJ5TGFiZWw6IERPTVNlbGVjdG9yRmFjdG9yeSA9IChtYXRjaGVyLCBvcHRpb25zKSA9PlxuICBuZXcgRE9NU2VsZWN0b3IoZWwgPT4gRE9NUXVlcmllcy5xdWVyeUFsbEJ5TGFiZWxUZXh0KGVsLCBtYXRjaGVyLCBvcHRpb25zKSk7XG5cbmV4cG9ydCBjb25zdCBieVBsYWNlaG9sZGVyOiBET01TZWxlY3RvckZhY3RvcnkgPSAobWF0Y2hlciwgb3B0aW9ucykgPT5cbiAgbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dChlbCwgbWF0Y2hlciwgb3B0aW9ucykpO1xuXG5leHBvcnQgY29uc3QgYnlUZXh0OiBET01TZWxlY3RvckZhY3Rvcnk8U2VsZWN0b3JNYXRjaGVyT3B0aW9ucz4gPSAobWF0Y2hlciwgb3B0aW9ucykgPT5cbiAgbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeVRleHQoZWwsIG1hdGNoZXIsIG9wdGlvbnMpKTtcblxuZXhwb3J0IGNvbnN0IGJ5VGV4dENvbnRlbnQgPSAobWF0Y2hlcjogTWF0Y2hlciwgb3B0aW9uczogTWFuZGF0b3J5U2VsZWN0b3JNYXRjaGluZ09wdGlvbnMpOiBET01TZWxlY3RvciA9PiB7XG4gIGxldCB0ZXh0Q29udGVudE1hdGNoZXI6IE1hdGNoZXI7XG4gIGNvbnN0IG5vcm1hbGl6ZXI6IE5vcm1hbGl6ZXJGbiA9IG9wdGlvbnM/Lm5vcm1hbGl6ZXIgfHwgZ2V0RGVmYXVsdE5vcm1hbGl6ZXIob3B0aW9ucyk7XG4gIGNvbnN0IGdldFRleHRDb250ZW50ID0gKGVsZW06IEhUTUxFbGVtZW50KTogc3RyaW5nID0+IG5vcm1hbGl6ZXIoZWxlbS50ZXh0Q29udGVudCA/PyAnJyk7XG5cbiAgaWYgKHR5cGVvZiBtYXRjaGVyID09PSAnc3RyaW5nJykge1xuICAgIHRleHRDb250ZW50TWF0Y2hlciA9IChfLCBlbGVtKSA9PiB7XG4gICAgICBpZiAob3B0aW9ucz8uZXhhY3QgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgZ2V0VGV4dENvbnRlbnQoZWxlbSlcbiAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAuaW5kZXhPZihtYXRjaGVyLnRvTG93ZXJDYXNlKCkpID49IDBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFRleHRDb250ZW50KGVsZW0pID09PSBtYXRjaGVyO1xuICAgIH07XG4gIH0gZWxzZSBpZiAobWF0Y2hlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHRleHRDb250ZW50TWF0Y2hlciA9IChfLCBlbGVtKSA9PiBtYXRjaGVyLnRlc3QoZ2V0VGV4dENvbnRlbnQoZWxlbSkpO1xuICB9IGVsc2Uge1xuICAgIHRleHRDb250ZW50TWF0Y2hlciA9IChfLCBlbGVtKSA9PiBtYXRjaGVyKGdldFRleHRDb250ZW50KGVsZW0pLCBlbGVtKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgRE9NU2VsZWN0b3IoZWwgPT4gRE9NUXVlcmllcy5xdWVyeUFsbEJ5VGV4dChlbCwgdGV4dENvbnRlbnRNYXRjaGVyLCBvcHRpb25zKSk7XG59O1xuXG5leHBvcnQgY29uc3QgYnlBbHRUZXh0OiBET01TZWxlY3RvckZhY3RvcnkgPSAobWF0Y2hlciwgb3B0aW9ucykgPT5cbiAgbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeUFsdFRleHQoZWwsIG1hdGNoZXIsIG9wdGlvbnMpKTtcblxuZXhwb3J0IGNvbnN0IGJ5VGl0bGU6IERPTVNlbGVjdG9yRmFjdG9yeSA9IChtYXRjaGVyLCBvcHRpb25zKSA9PiBuZXcgRE9NU2VsZWN0b3IoZWwgPT4gRE9NUXVlcmllcy5xdWVyeUFsbEJ5VGl0bGUoZWwsIG1hdGNoZXIsIG9wdGlvbnMpKTtcblxuZXhwb3J0IGNvbnN0IGJ5VGVzdElkOiBET01TZWxlY3RvckZhY3RvcnkgPSAobWF0Y2hlciwgb3B0aW9ucykgPT4gbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeVRlc3RJZChlbCwgbWF0Y2hlciwgb3B0aW9ucykpO1xuXG5leHBvcnQgY29uc3QgYnlWYWx1ZTogRE9NU2VsZWN0b3JGYWN0b3J5ID0gKG1hdGNoZXIsIG9wdGlvbnMpID0+XG4gIG5ldyBET01TZWxlY3RvcihlbCA9PiBET01RdWVyaWVzLnF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUoZWwsIG1hdGNoZXIsIG9wdGlvbnMpKTtcblxuZXhwb3J0IGNvbnN0IGJ5Um9sZTogRE9NU2VsZWN0b3JGYWN0b3J5PEJ5Um9sZU9wdGlvbnM+ID0gKG1hdGNoZXIsIG9wdGlvbnMpID0+XG4gIG5ldyBET01TZWxlY3RvcihlbCA9PiBET01RdWVyaWVzLnF1ZXJ5QWxsQnlSb2xlKGVsLCBtYXRjaGVyLCBvcHRpb25zKSk7XG4iXX0=