import { ChangeDetectorRef, DebugElement, ElementRef } from '@angular/core';
import { Observable } from 'rxjs';
import { tick } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { DOMSelector } from '../dom-selectors';
import { isString } from '../types';
import { getChildren, setProps } from '../internals/query';
import { patchElementFocus } from '../internals/element-focus';
import { createMouseEvent } from '../event-creators';
import { dispatchFakeEvent, dispatchKeyboardEvent, dispatchMouseEvent, dispatchTouchEvent } from '../dispatch-events';
import { typeInElement } from '../type-in-element';
import { selectOption } from '../select-option';
import { BaseSpectator } from './base-spectator';
const KEY_UP = 'keyup';
/**
 * @internal
 */
export class DomSpectator extends BaseSpectator {
    constructor(fixture, debugElement, instance, element) {
        super();
        this.fixture = fixture;
        this.debugElement = debugElement;
        this.instance = instance;
        this.element = element;
    }
    inject(token) {
        return super.inject(token);
    }
    detectChanges() {
        this.fixture.detectChanges();
    }
    query(directiveOrSelector, options) {
        if ((options || {}).root) {
            if (isString(directiveOrSelector)) {
                return document.querySelector(directiveOrSelector);
            }
            if (directiveOrSelector instanceof DOMSelector) {
                return directiveOrSelector.execute(document)[0] || null;
            }
        }
        return getChildren(this.debugElement)(directiveOrSelector, options)[0] || null;
    }
    queryAll(directiveOrSelector, options) {
        if ((options || {}).root) {
            if (isString(directiveOrSelector)) {
                return Array.from(document.querySelectorAll(directiveOrSelector));
            }
            if (directiveOrSelector instanceof DOMSelector) {
                return directiveOrSelector.execute(document);
            }
        }
        return getChildren(this.debugElement)(directiveOrSelector, options);
    }
    queryLast(directiveOrSelector, options) {
        let result = [];
        if ((options || {}).root) {
            if (isString(directiveOrSelector)) {
                result = Array.from(document.querySelectorAll(directiveOrSelector));
            }
            if (directiveOrSelector instanceof DOMSelector) {
                result = directiveOrSelector.execute(document);
            }
        }
        else {
            result = getChildren(this.debugElement)(directiveOrSelector, options);
        }
        if (result && result.length) {
            return result[result.length - 1];
        }
        return null;
    }
    setInput(input, value) {
        setProps(this.instance, input, value, false);
        this.debugElement.injector.get(ChangeDetectorRef).detectChanges();
    }
    output(output) {
        const observable = this.instance[output];
        if (!(observable instanceof Observable)) {
            throw new Error(`${output} is not an @Output`);
        }
        return observable;
    }
    tick(millis) {
        tick(millis);
        this.detectChanges();
    }
    click(selector = this.element) {
        const element = this.getNativeElement(selector);
        if (!(element instanceof HTMLElement)) {
            throw new Error(`Cannot click: ${selector} is not a HTMLElement`);
        }
        element.click();
        this.detectChanges();
    }
    blur(selector = this.element) {
        const element = this.getNativeElement(selector);
        if (!(element instanceof HTMLElement)) {
            throw new Error(`Cannot blur: ${selector} is not a HTMLElement`);
        }
        patchElementFocus(element);
        element.blur();
        this.detectChanges();
    }
    focus(selector = this.element) {
        const element = this.getNativeElement(selector);
        if (!(element instanceof HTMLElement)) {
            throw new Error(`Cannot focus: ${selector} is not a HTMLElement`);
        }
        patchElementFocus(element);
        element.focus();
        this.detectChanges();
    }
    dispatchMouseEvent(selector = this.element, type, x = 0, y = 0, event = createMouseEvent(type, x, y)) {
        const element = this.getNativeElement(selector);
        if (!(element instanceof Node)) {
            throw new Error(`Cannot dispatch mouse event: ${selector} is not a node`);
        }
        const dispatchedEvent = dispatchMouseEvent(element, type, x, y, event);
        this.detectChanges();
        return dispatchedEvent;
    }
    dispatchKeyboardEvent(selector = this.element, type, keyOrKeyCode, target) {
        const element = this.getNativeElement(selector);
        if (!(element instanceof Node)) {
            throw new Error(`Cannot dispatch keyboard event: ${selector} is not a node`);
        }
        const event = dispatchKeyboardEvent(element, type, keyOrKeyCode, target);
        this.detectChanges();
        return event;
    }
    dispatchFakeEvent(selector = this.element, type, canBubble) {
        const event = dispatchFakeEvent(this.getNativeElement(selector), type, canBubble);
        this.detectChanges();
        return event;
    }
    triggerEventHandler(directiveOrSelector, eventName, eventObj, options) {
        const triggerDebugElement = this.getTriggerDebugElement(directiveOrSelector, options);
        if (!triggerDebugElement) {
            /* eslint-disable no-console */
            console.error(`${directiveOrSelector} does not exists`);
            return;
        }
        triggerDebugElement.triggerEventHandler(eventName, eventObj);
        this.detectChanges();
    }
    get keyboard() {
        return {
            pressKey: (key, selector = this.element, event = KEY_UP) => {
                this.dispatchKeyboardEvent(selector, event, key);
            },
            pressEscape: (selector = this.element, event = KEY_UP) => {
                this.dispatchKeyboardEvent(selector, event, { key: 'Escape', keyCode: 27 });
            },
            pressEnter: (selector = this.element, event = KEY_UP) => {
                this.dispatchKeyboardEvent(selector, event, { key: 'Enter', keyCode: 13 });
            },
            pressTab: (selector = this.element, event = KEY_UP) => {
                this.dispatchKeyboardEvent(selector, event, { key: 'Tab', keyCode: 9 });
            },
            pressBackspace: (selector = this.element, event = KEY_UP) => {
                this.dispatchKeyboardEvent(selector, event, { key: 'Backspace', keyCode: 8 });
            },
        };
    }
    get mouse() {
        return {
            contextmenu: (selector = this.element) => {
                this.dispatchMouseEvent(selector, 'contextmenu');
            },
            dblclick: (selector = this.element) => {
                this.dispatchMouseEvent(selector, 'dblclick');
            },
        };
    }
    dispatchTouchEvent(selector = this.element, type, x = 0, y = 0) {
        dispatchTouchEvent(this.getNativeElement(selector), type, x, y);
        this.detectChanges();
    }
    typeInElement(value, selector = this.element) {
        typeInElement(value, this.getNativeElement(selector));
        this.detectChanges();
    }
    selectOption(selector = this.element, options, config = { emitEvents: true }) {
        if (!selector) {
            throw new Error(`Cannot find select: ${selector}`);
        }
        selectOption(options, this.getNativeElement(selector), config);
        this.detectChanges();
    }
    getNativeElement(selector) {
        let element;
        // Support global objects window and document
        if (selector === window || selector === document) {
            return selector;
        }
        if (isString(selector)) {
            const exists = this.debugElement.query(By.css(selector));
            if (exists) {
                element = exists.nativeElement;
            }
            else {
                /* eslint-disable no-console */
                console.error(`${selector} does not exists`);
            }
        }
        else if (selector instanceof DOMSelector) {
            element = selector.execute(document)[0] || null;
        }
        else {
            if (selector instanceof DebugElement || selector instanceof ElementRef) {
                element = selector.nativeElement;
            }
            else {
                element = selector;
            }
        }
        return element;
    }
    getTriggerDebugElement(directiveOrSelector, options) {
        const debugElement = (options === null || options === void 0 ? void 0 : options.root) ? this.getRootDebugElement() : this.debugElement;
        if (isString(directiveOrSelector)) {
            return debugElement.query(By.css(directiveOrSelector));
        }
        else if (directiveOrSelector instanceof DebugElement) {
            return directiveOrSelector;
        }
        else {
            return debugElement.query(By.directive(directiveOrSelector));
        }
    }
    getRootDebugElement() {
        let element = this.debugElement;
        /**
         * This bounded loop call is required to access the debug element for
         * root dom element
         */
        while (true) {
            if (!element) {
                throw Error('Unable to find root element');
            }
            if (!element.parent) {
                // Found the root element
                return element;
            }
            element = element.parent;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,